#!/bin/bash

# TODO 先安装MapReduce V1  后期 进行YARN的安装
# TODO 安装完成之后是否需要生成一个文件，记录哪些是namenode，哪些是datanode等等，方便后期控制脚本操作

# 关于使用-ivh参数是否不好的问题:
# petabase的安装很复杂，依赖很多，推荐的方式是在在线环境下使用yum安装，自动解决依赖。
# 但这里，我们需要尽可能的在离线情况下安装，所以，在安装过程中不免出现缺失依赖的问题，
# 使用--nodeps很可能会出现某个软件安装好了，但是因依赖缺乏无法运行的事情，但这本身不是部署人员的问题，
# 所以，脚本编写人员清楚依赖关系，并保证各个软件的运行依赖正确安装即可，故此处使用--nodeps不会有问题，
# 如果出现问题，当属安装脚本的bug或者缺陷，应修复
# ! 刚刚装好CentOS 6 后，强烈建议使用 yum update进行升级后再使用本系列脚本

# IFS 设置为了 ',' 并没有修改回来，这个是不好的实现，应该如下
#
# IFS_BAK=${IFS}
# do your thing
# IFS=${IFS_BAK}
# 但是，本脚本多次使用了 for host in datanodes，所以本脚本没有进行上面的操作
# 注意，若有 IFS=','  datanodes="1,2,3,4"   ,那么
# echo ${datanodes}   结果是  1 2 3 4
# echo "${datanodes}" 结果是  1,2,3,4

# 注意，uninstall 不应该指定任何参数，就是卸载机群，原来提供参数只是起到了提示的作用，现在信息存储下来了，不用提示，所以不用参数
# 注意，install/uninstall 只提供安装和卸载，增删节点是另一个脚本做的事情
# 注意，所有对namenode操作应该在datanode之间


# import temp variable
source ./utils
construct_soft_dict


# 用户输入
HELP=false
CUSTOM_FILE=""
datanodes=""
secondary_namenode=""

# 关联数组
# use for check summary
namenode_deps_soft_dict=""
namenode_installed_soft_dict=""
secnamenode_installed_soft_dict=""
declare -A datanode_deps_soft_dict
declare -A datanode_installed_soft_dict

is_ready="true"


show_usage(){
  cat <<EOF

  usage: $0 COMMAND OPTIONS

  COMMAND CAN BE
  install	To intall the cluster
  uninstall	To unintall the cluster, WILL IGNORE ALL THE OPTIONS!

  OPTIONS CAN BE:
  SPECIFY THE DATANODE
  	$0 {-n|--nodes} [datanode list] 
	The datanode list should be separated by ',', seems like host1,host2,host3

  SPECIFY THE SECOND NAMENODE
  	$0 {-s|--secondary-namenode} [second-namenode]
	The secondary namenode should be in the datanode list

  USE FILE TO SPECIFY THE DATANODE AND NAMENODE
  	$0 {-f|--nodes-file} [filepath]

  The file format must be like following:
  	eg:
  	#file specify the datanodes and the second-namenode
	datanodes:
	esen-petabase-234,esen-petabase-235
	second-name-node:
	esen-petabase-234
        DON'T forget the ":" ! And the last 's' after 'datanodes'

  SHOW THIS HELP
  	$0 {-h|--help} 


  e.g. $0 install -n esen-petabase-234,esen-petabase-235 -s esen-petabase-234
  e.g. $0 status  -f your_deploy_file
  e.g. $0 uninstall

EOF
exit 1
}


show_deploy_operate()
{
  iecho "操作类型:	${1}"
  iecho "从机列表:	${2}"
  iecho "第二主机:	${3}"

  iecho "输入 'YES' 以确认"
  read  TOGO
  if [ ${TOGO}x = "YES"x ];then
    return 0;
  else
    iecho "操作取消"
    exit 1;
  fi
}





# now install jdk by rpm
install_jdk()
{
  echo "installing jdk"
  mkdir -p /usr/java;
  tar xzvf $COMMON_SOFT_DIR/jdk-7u45-linux-x64.tar.gz -C /usr/java/ 1>/dev/null 2>&1;
    if [ $? -ne 0 ];then
      eecho "Unable to install jdk  $MASTER_HOST";
      exit 0
    fi
  cat $COMMON_SOFT_DIR/java_env  >> /etc/profile;
  source /etc/profile;
}



# 关于下面的函数 安装rpm包函数的编写方式问题
# 1直接指定rpm包的文件名进行安装；
# 2遍历某个文件夹，安装该文件夹下面的所有rpm包
# 第一种的优势是，直接通过安装脚本就可以知道安装了哪些包
# 第二种的优势是，当有包更新的时候，我们只需要对目录中的rpm包文件进行替换即可，而第一种方法还需要修改包名(冗长的平台，版本号等等)
# 第二种的重大缺陷是，如果一个rpm包缺失，脚本不能自动发现。解决办法是安装脚本以及包发布之后生成一个md5码给部署人员验证
# 这里，我认为第二种方式比较容易维护，故使用之
# 20150508开始使用 rpm.list的方式，更具合理性

# not use now
install_soft_namenode()
{

  echo "[Log] install begin on $MASTER_HOST"

# now install jdk by rpm
# install_jdk

  for rpm_file in $NAMENODE_SOFT_DIR/*.rpm
  do
    check_and_install_local $rpm_file 
  done

  for rpm_file in $COMMON_SOFT_DIR/*.rpm
  do
    check_and_install_local $rpm_file 
  done

  for rpm_file in $EXT_SOFT_DIR/*.rpm
  do
    check_and_install_local $rpm_file 
  done
}


# not use now
install_soft_datanodes()
{
  for host in ${datanodes[@]}; do
#    echo "[Log] install begin on $host"
#
#    echo "[Log] install jdk on $host"
#
#    # install jdk
#    ssh   $host  "mkdir -p /usr/java"
#    ssh   $host  "tar xzvf $COMMON_SOFT_DIR/jdk-7u45-linux-x64.tar.gz -C /usr/java/ 1>/dev/null 2>&1"
#    if [ $? -ne 0 ];then
#      eecho "Unable to install jdk $MASTER_HOST";
#      exit 0
#    fi
#    ssh   $host  "cat $COMMON_SOFT_DIR/java_env  >> /etc/profile"
#    ssh   $host  "source /etc/profile"


  echo "[Log] install soft on $host"
  for rpm_file in $DATANODE_SOFT_DIR/*.rpm
  do
    check_and_install_remote $host $rpm_file 
  done

  for rpm_file in $COMMON_SOFT_DIR/*.rpm
  do
    check_and_install_remote $host $rpm_file 
  done

 done

}

# not use now
install_secondarynamenode()
{

  for rpm_file in $SEC_NAMENODE_SOFT_DIR/*.rpm
  do
    check_and_install_remote $secondary_namenode $rpm_file 
  done

}


echo_check_summary()
{

  local _datanodes=$1
  local _secondary_namenode=$1
  echo -e "\n\n"
  iecho  "本机的检查报告:"
  if [[ -n "${namenode_deps_soft_dict}" ]]; then
    echo "本机缺少必要依赖如下:"
    for deps_soft in ${namenode_deps_soft_dict};do
      echo "$deps_soft"
    done
    else
     echo "本机已经安装好所有依赖"
  fi


  if [[ -n "${namenode_installed_soft_dict}" ]]; then
    echo "本机已经安装如下组件:"
    for installed_soft in ${namenode_installed_soft_dict};do
      echo "$installed_soft"
    done
    wecho "强烈建议删除这些组件之后再执行安装脚本"
    else
     echo "本机环境干净，没有安装任何petabase组件"
  fi


  for host in ${_datanodes[@]}; do
    echo -e "\n\n"
    iecho  "${host}的检查报告："
    if [[ -n "${datanode_deps_soft_dict[${host}]}" ]]; then
      echo "$host缺少必要依赖如下:"
    for deps_soft in ${datanode_deps_soft_dict[${host}]};do
      echo "${deps_soft}"
      # if host has install a newer version will also report it, is it a bug?
    done
    else
      echo "${host}已经安装好所有依赖"
    fi

    if [[ -n "${datanode_installed_soft_dict[${host}]}" ]]; then
    echo "$host已经安装如下组件:"
    for installed_soft in ${datanode_installed_soft_dict[${host}]};do
      echo "${installed_soft}"
      # if host has install a newer version it won't report it, is it a bug?
      # To fixed it, we can construct a software list to check the software installed in any version
    done
      wecho "强烈建议删除这些组件之后再执行安装脚本"
    else
     echo "${host} 环境干净，没有安装任何petabase组件"
    fi
  done


  echo -e "\n\n"
  iecho  "第二主机(${_secondary_namenode})的检查报告:"
  if [[ -n "${secnamenode_installed_soft_dict}" ]]; then
    echo "第二主机安装了如下组件"
    for installed_soft in ${secnamenode_installed_soft_dict};do
      echo "$installed_soft"
    done
      wecho "强烈建议删除这些组件之后再执行安装脚本"
    else
     echo "第二主机环境干净，没有安装任何petabase组件"
  fi

  if [ "${is_ready}"x = "false"x ];then
    echo -e "\n如需解决依赖关系,请先执行预安装脚本之后再执行本脚本"
    echo -e "若已经安装某些组件,建议先使用本脚本卸载后再执行安装操作"
  elif [ "${is_ready}"x = "true"x ];then
    echo -e "所有机器的依赖关系已经满足，并且没有机器安装任何组件，那么您可以继续进行petabase集群的安装了"
  else
    echo "脚本内部错误，请联系脚本编写人员"
  fi
}


check_soft_namenode()
{

  # TODO  fix jdk installed

  # 依赖包比较特殊，对版本要求不严苛，总的来说，会出现下面的情况
  # 没有安装依赖包，此时预安装脚本会保证安装
  # 安装了依赖包，但版本较旧，此时预安装脚本会帮助更新
  # 安装了依赖包，但版本较新，此时预安装脚本不更新，不做处理，认为新安装包能胜任现在的工作


  iecho "开始检查本机petabase 依赖的安装情况"
  for key in ${!NESS_SOFT_DICT[@]};do
    check_install_local ${key}
    if [ $? = 1 ];then
      namenode_deps_soft_dict=${namenode_deps_soft_dict}"${NESS_SOFT_DICT[${key}]},"
      is_ready="false"
    fi
  done

  iecho "开始检查本机petabase组件是否已经安装"
  for key in ${!COMMON_SOFT_DICT[@]};do
    check_install_local ${key}
    if [ $? = 0 ];then
      installed_pkg_name=`rpm -q ${key}`
      namenode_installed_soft_dict=${namenode_installed_soft_dict}"${installed_pkg_name},"
      is_ready="false"
    fi
  done

  for key in ${!NAMENODE_SOFT_DICT[@]};do
    check_install_local ${key}
    if [ $? = 0 ];then
      installed_pkg_name=`rpm -q ${key}`
      namenode_installed_soft_dict=${namenode_installed_soft_dict}"${installed_pkg_name},"
      is_ready="false"
    fi
  done

  for key in ${!EXT_SOFT_DICT[@]};do
    check_install_local ${key}
    if [ $? = 0 ];then
      installed_pkg_name=`rpm -q ${key}`
      namenode_installed_soft_dict=${namenode_installed_soft_dict}"${installed_pkg_name},"
      is_ready="false"
    fi
  done

#  使用上面的方式更准确，不过要创建一个文件列表
#  iecho "开始检查本机petabase 依赖的安装情况"
#  for rpm_file in $NESS_SOFT_DIR/*.rpm
#  do
#    pkgname=`basename $rpm_file .rpm`
#    check_install_local $pkgname 
#    if [ $? = 1 ];then
#      namenode_deps_soft_dict=${namenode_deps_soft_dict}",$pkgname"
#    fi
#  done
#
#
#  iecho "开始检查本机petabase组件是否已经安装"
#  for rpm_file in $NAMENODE_SOFT_DIR/*.rpm
#  do
#    pkgname=`basename $rpm_file .rpm`
#    check_install_local $pkgname 
#    if [ $? = 0 ];then
#      namenode_installed_soft_dict=${namenode_installed_soft_dict}",$pkgname"
#    fi
#  done
#
#  for rpm_file in $COMMON_SOFT_DIR/*.rpm
#  do
#    pkgname=`basename $rpm_file .rpm`
#    check_install_local $pkgname 
#    if [ $? = 0 ];then
#      namenode_installed_soft_dict=${namenode_installed_soft_dict}",$pkgname"
#    fi
#  done
#
#  for rpm_file in $EXT_SOFT_DIR/*.rpm
#  do
#    pkgname=`basename $rpm_file .rpm`
#    check_install_local $pkgname 
#    if [ $? = 0 ];then
#      namenode_installed_soft_dict=${namenode_installed_soft_dict}",$pkgname"
#    fi
#  done
}



check_soft_datanodes()
{

  local _datanodes=$1
  for host in ${_datanodes[@]}; do

  iecho "开始检查${host} 上petabase 依赖的安装情况"
  for key in ${!NESS_SOFT_DICT[@]};do
    check_install_remote ${host} ${key}
    if [ $? = 1 ];then
      datanode_deps_soft_dict[${host}]=${datanode_deps_soft_dict[${host}]}"${NESS_SOFT_DICT[${key}]},"
      is_ready="false"
    fi

  done

  iecho "开始检查${host} 上petabase组件是否已经安装"
  for key in ${!DATANODE_SOFT_DICT[@]};do
    check_install_remote ${host} ${key}
    if [ $? = 0 ];then
      installed_pkg_name=`ssh ${host} rpm -q ${key}`
      datanode_installed_soft_dict[${host}]=${datanode_installed_soft_dict[${host}]}"${installed_pkg_name},"
      is_ready="false"
    fi
  done


  for key in ${!COMMON_SOFT_DICT[@]};do
    check_install_remote ${host} ${key}
    if [ $? = 0 ];then
      installed_pkg_name=`ssh ${host} rpm -q ${key}`
      datanode_installed_soft_dict[${host}]=${datanode_installed_soft_dict[${host}]}"${installed_pkg_name},"
      is_ready="false"
    fi
  done



#  使用上面的方式更准确，不过要创建一个文件列表
#  iecho "开始检查${host} 上petabase 依赖的安装情况"
#  for rpm_file in $NESS_SOFT_DIR/*.rpm
#  do
#    pkgname=`basename $rpm_file .rpm`
#    check_install_remote $host $pkgname 
#    if [ $? = 1 ];then
#      datanode_deps_soft_dict[${host}]=${datanode_deps_soft_dict[${host}]}",$pkgname"
#    fi
#  done
#
#
#  iecho "开始检查${host} 上petabase组件是否已经安装"
#  for rpm_file in $DATANODE_SOFT_DIR/*.rpm
#  do
#    pkgname=`basename $rpm_file .rpm`
#    check_install_remote $host $pkgname
#    if [ $? = 0 ];then
#      datanode_installed_soft_dict[${host}]=${datanode_installed_soft_dict[${host}]}",$pkgname"
#    fi
#  done
#
#  for rpm_file in $COMMON_SOFT_DIR/*.rpm
#  do
#    pkgname=`basename $rpm_file .rpm`
#    check_install_remote $host $pkgname 
#    if [ $? = 0 ];then
#      datanode_installed_soft_dict[${host}]=${datanode_installed_soft_dict[${host}]}",$pkgname"
#    fi
#  done

 done

}


check_soft_secondarynamenode()
{
  iecho "开始检查第二主机 ${_secondary_namenode} 上petabase 相关组件是否已经安装"
  local _secondary_namenode=$1
  for key in ${!SEC_NAMENODE_SOFT_DICT[@]};do
    check_install_remote ${_secondary_namenode} ${key}
    if [ $? = 0 ];then
      installed_pkg_name=`ssh ${_secondary_namenode} rpm -q ${key}`
      secnamenode_installed_soft_dict=${secnamenode_installed_soft_dict}"${installed_pkg_name},"
      is_ready="false"
    fi
  done

#  iecho "开始检查第二主机 ${secondary_namenode} 上petabase 相关组件是否已经安装"
#  for rpm_file in $SEC_NAMENODE_SOFT_DIR/*.rpm
#  do
#    pkgname=`basename $rpm_file .rpm`
#    check_install_remote $secondary_namenode $pkgname 
#    if [ $? = 0 ];then
#      datanode_installed_soft_dict[${secondary_namenode}]=${datanode_installed_soft_dict[${secondary_namenode}]}",$pkgname"
#    fi
#  done

}

# now not use
init_start_hadoop()
{
  echo "[Log] hadoop initialization"
  echo "the hadoop data folder will be removed!"

  # master node
  echo "now in $MASTER_HOST"
  rm -rf /data
  mkdir -p /data/1/dfs/nn
  chmod 700 /data/1/dfs/nn
  chown -R hdfs:hdfs /data/1/dfs/nn

  # TODO mapreduce V1 特有
  mkdir -p /data/1/mapred/local /data/2/mapred/local /data/3/mapred/local
  chown -R mapred:hadoop /data/1/mapred/local /data/2/mapred/local /data/3/mapred/local

  # slaves node
  for node in ${DATANODES[@]}; do
    if [ "${node}" != "${MASTER_HOST}" ]; then
      # 上面是nn 这里是dn
      echo "now in $node"
      ssh  $node "rm -rf /data"
      ssh  $node "mkdir -p /data/1/dfs/dn /data/2/dfs/dn /data/3/dfs/dn"
      ssh  $node "chown -R hdfs:hdfs /data/1/dfs/dn /data/2/dfs/dn /data/3/dfs/dn"

      ssh  $node "mkdir -p /data/1/mapred/local /data/2/mapred/local /data/3/mapred/local"
      ssh  $node "chown -R mapred:hadoop /data/1/mapred/local /data/2/mapred/local /data/3/mapred/local"
    fi
  done

  # master node  format
  echo "now in $MASTER_HOST"
  sudo -u hdfs hdfs namenode -format


  # TODO 这里启动了，所以后面会重复启动，但是这里必须启动，不然没法配置mapreduce
  # master node
  echo "now in $MASTER_HOST"
  sudo service hadoop-hdfs-namenode start

  # slaves node
  for node in ${DATANODES[@]}; do
    if [ "${node}" != "${MASTER_HOST}" ]; then
      echo "now in $node"
      ssh  $node "service hadoop-hdfs-datanode start"
    fi
  done

  # master node
  echo "now in $MASTER_HOST"
  sudo -u hdfs hadoop fs -mkdir /tmp
  sudo -u hdfs hadoop fs -chmod -R 1777 /tmp

  sudo -u hdfs hadoop fs -mkdir -p /var/lib/hadoop-hdfs/cache/mapred/mapred/staging
  sudo -u hdfs hadoop fs -chmod 1777 /var/lib/hadoop-hdfs/cache/mapred/mapred/staging
  sudo -u hdfs hadoop fs -chown -R mapred /var/lib/hadoop-hdfs/cache/mapred
  sudo -u hdfs hadoop fs -mkdir -p /tmp/mapred/system
  sudo -u hdfs hadoop fs -chown mapred:hadoop /tmp/mapred/system

  # slaves node
  for node in ${DATANODES[@]}; do
    if [ "${node}" != "${MASTER_HOST}" ]; then
      echo "now in ${node}"
      ssh  $node "service hadoop-0.20-mapreduce-tasktracker start"
    fi
  done

  #hadoop-secondarynamenode
  ssh  $secondary_namenode "service hadoop-hdfs-secondarynamenode start"

  # master node
  echo "now in $MASTER_HOST"
  sudo service hadoop-0.20-mapreduce-jobtracker start
}





init_hive()
{
  iecho "初始化 hive hdfs环境"
  # hadoop fs  和 hdfs dfs 效果一样，后者较新，用后者
  sudo -u hdfs hdfs dfs -mkdir -p /user/hive/warehouse
  sudo -u hdfs hdfs dfs -chmod 777 /user
  sudo -u hdfs hdfs dfs -chmod 1777 /user/hive
  sudo -u hdfs hdfs dfs -chmod 1777 /user/hive/warehouse
}






# not use now
uninstall_soft_namenode()
{
#  now install jdk by rpm in preinstall
#  echo "uninstall jdk on $MASTER_HOST"
#  rm -rf /usr/java
#  sed -i '/export JAVA_HOME=/'d /etc/profile
#  sed -i '/export JRE_HOME=/'d /etc/profile
#  sed -i '/export CLASSPATH=/'d /etc/profile
#  sed -i '/export PATH=/'d /etc/profile

  echo "uninstall software on $MASTER_HOST"

  for rpm_file in $NAMENODE_SOFT_DIR/*.rpm
  do
    check_and_uninstall_local $rpm_file
  done

  for rpm_file in $COMMON_SOFT_DIR/*.rpm
  do
    check_and_uninstall_local $rpm_file
  done

  for rpm_file in $EXT_SOFT_DIR/*.rpm
  do
    check_and_uninstall_local $rpm_file
  done


}

# not use now
uninstall_soft_datanodes()
{
  for host in ${datanodes[@]}; do

#    now install by rpm in preinstall
#    echo "uninstall jdk on $host"
#    ssh  $host "rm -rf /usr/java"
#    ssh  $host "sed -i '/export JAVA_HOME=/'d /etc/profile"
#    ssh  $host "sed -i '/export JRE_HOME=/'d /etc/profile"
#    ssh  $host "sed -i '/export CLASSPATH=/'d /etc/profile" 
#    ssh  $host "sed -i '/export PATH=/'d /etc/profile" 

    for rpm_file in $DATANODE_SOFT_DIR/*.rpm
    do
      check_and_uninstall_remote $host $rpm_file
    done

    for rpm_file in $COMMON_SOFT_DIR/*.rpm
    do 
      check_and_uninstall_remote $host $rpm_file
    done
  done

}

# not use now
uninstall_soft_secondarynamenode()
{

  for rpm_file in $SEC_NAMENODE_SOFT_DIR/*.rpm
    do
      check_and_uninstall_remote "$secondary_namenode" "$rpm_file"
    done
}



command_arg_check()
{

  if [ ${operate}x = ""x ];then
    wecho "请指定一个操作类型 status/install/uninstall"
    exit 1
  elif [ ${operate}x != "install"x ] && [ ${operate}x != "uninstall"x ] && [ ${operate}x != "status"x ];then
    wecho "不支持的操作类型  '${operate}' "
    exit 1
  fi

 return 0
}


option_arg_check()
{
  if [[ -z ${datanodes} ]];then
    wecho "请指定从机列表"
    return 1
  fi

  if [ -z ${secondary_namenode} ];then
    wecho "请指定第二主机"
    return 1
  fi

  #secondary_namenode 必须在nodes中
  in=False
  for host in ${datanodes[@]}; do
    if [ ${host} = ${secondary_namenode} ];then
      in=True
      return 0
    fi
  done
  if [ ${in}x = "False"x ];then
    wecho "第二主机必须是在从机列表中"
    return 1
  fi
}


######################################################################################

construct_host_info
perm_check

TEMP=`getopt -o n:s:f:hz:: -l nodes:,secondary-namenode:,nodes-file:,help,z-long \
     -n '错误的输入参数' -- "$@" `

if [ $? != 0 ] ; then echo "您可以输入 $0 --help/-h 来查看帮助" >&2 ; exit 1 ; fi
if [ $# = 0 ] ; then echo "没有命令和参数,您可以输入 $0 --help/-h 来查看帮助" >&2 ; exit 1 ; fi

eval set -- "$TEMP"



while true ; do
  case "$1" in
# c 和 h 选项是没有参数的，如果使用了$2，会直接取下一个参数
     -n|--nodes) 
       IFS=','; datanodes=$2;
       shift 2 ;;

     -s|--secondary-namenode) 
       secondary_namenode=$2;
       shift 2 ;;

     -f|--nodes-file) 
       CUSTOM_FILE=$2;
       if [ ! -r $CUSTOM_FILE ];then
         wecho "文件 ${CUSTOM_FILE} 不存在或者不可读"
	 exit 1
       fi
       while read LINE
       do
	 if [ ${LINE}x = "second-name-node:"x ];then
	 read LINE
	 secondary_namenode=$LINE
	 fi
	 if [ ${LINE}x = "datanodes:"x ];then
	 read LINE
         IFS=','; datanodes=$LINE;
	 fi
	 done  <${CUSTOM_FILE}
       shift 2 ;;

     -h|--help)  
       HELP=true;  
       shift ;;

 #z has an optional argument. As we are in quoted mode,
 #an empty parameter will be generated if its optional
 #argument is not found.
       -z|--z-long)
       case "$2" in
       "") echo "Option $1, no argument"; shift 2 ;;
       *)  echo "Option $1's argument is $2" ; shift 2 ;;
       esac ;;
     --) shift ; break ;;
     *) echo "Internal error!" ; exit 1 ;;
  esac
done

#echo "Remaining arguments:"
#for arg do
# echo '--> ' "$arg" ;
#done

if [ "${HELP}"x = "true"x ];then
  show_usage
  exit 0
fi

operate=${1}

command_arg_check
if [ $? = 1 ];then
  exit 1
fi

test_connect_datanode "${datanodes}"

if [ ${operate}x = "install"x ];then
  iecho "`date +%Y%m%d-%T` 开始安装"

  show_deploy_operate "install" "${datanodes}" "${secondary_namenode}"

  option_arg_check

  check_namenode_user-group
  check_datanode_user-group "${datanodes}"
  get_mysql_root_passwd

  # old way
  #install_soft_namenode
  #install_soft_datanodes
  #install_secondarynamenode

  check_and_install_hadoop_namenode
  check_and_install_hadoop_datanode "${datanodes}"

  check_and_install_namenode_from_rpm_list
  check_and_install_datanode_from_rpm_list "${datanodes}"
  check_and_install_secnamenode_from_rpm_list "${secondary_namenode}"


  generate_host_info "${datanodes}" "${secondary_namenode}"

  construct_host_info


  # 实际上就是generate_host_info里面的内容，这里只是为了使用 start_xxx
  # 再次创建相当于更新
  # 后面不再使用 datanodes等 而是使用 DATANODES等 因为这已经不仅仅是install 而是 服务的 init了 虽然在这里， DATANODES和datanodes没有区别

  # bigtop 是 cdh的依赖
  conf_namenode_bigtop-utils
  conf_datanode_bigtop-utils "${DATANODES}"
  prepare_use_hadoop_namenode
  prepare_use_hadoop_datanode "${DATANODES}"
  prepare_use_mapred_namenode
  prepare_use_mapred_datanode  "${DATANODES}"
  prepare_use_hive_namenode
  prepare_use_hive_datanode "${DATANODES}"


  # 配置文件
  init_configure_file "${DATANODES}" "${SECONDARY_NAMENODE}" "${mysql_root_passwd}"
  copy_xml_namenode
  copy_xml_datanode "${DATANODES}"
  
  # 负载均衡
  conf_haproxy "${DATANODES}"
  start_haproxy

  # init and start
  init_zookeeper_namenode
  init_zookeeper_datanode "${DATANODES}"
  start_zookeeper

  # TODO  单独调用 似乎不太协调
  sudo -u hdfs hdfs namenode -format

  start_hadoop

  # 这个仅仅做一次，以后不用做
  init_mapred_tracker

  start_mapred_tracker

  # 启动配置放到一起，因为要对hdfs进行操作
  # 20150518 分开了
  #init_start_hadoop

  # hive 配置在namenode上面了，仅仅配置本机(namenode)即可
  # 这个仅仅做一次，以后不用做
  init_hive
  start_hive
  start_petabase

elif [ ${operate}x = "uninstall"x ];then

  show_deploy_operate "uninstall" "${DATANODES}" "${SECONDARY_NAMENODE}"

  iecho "`date +%Y%m%d-%T` 开始卸载"

  # first stop all service
  ./petabase-service stop -y
  if [ $? = 1 ];then
    exit 1
  fi

  delete_group-user_namenode
  delete_group-user_datanode "${datanodes}"


  uninstall_namenode_from_rpm_list
  uninstall_datanode_from_rpm_list "${DATANODES}"
  uninstall_secnamenode_from_rpm_list "${SECONDARY_NAMENODE}"

  uninstall_hadoop_namenode
  uninstall_hadoop_datanode "${DATANODES}"

  clean_host_info

  #uninstall_soft_namenode
  #uninstall_soft_datanodes
  #uninstall_soft_secondarynamenode

elif [ ${operate}x = "status"x ];then
  iecho "`date +%Y%m%d-%T` 开始检查安装环境..."
  check_soft_namenode
  check_soft_datanodes "${datanodes}"
  check_soft_secondarynamenode "${secondary_namenode}"
  echo_check_summary "${datanodes}" "${secondary_namenode}"
else
  echo "目前还不支持  ${operate}  操作..."
  exit 1;
fi
  iecho "`date +%Y%m%d-%T` 完成"
